{"ast":null,"code":"import { countries } from '../../../datas/countriesData';\nexport default ((req, res) => {\n  const datafilter = [];\n  const reponse = \"\";\n  countries.forEach(donnee => datafilter.push(donnee.hotels));\n\n  for (let index = 0; index < datafilter.length - 1; index++) {\n    reponse = countries[index].hotels.filter(hotel => hotel.id === req.query.id);\n  }\n\n  reponse.lenght ? res.status(200).json({\n    id: req.query.id,\n    name: 'haha'\n  }) : res.status(404).json({\n    message: `this details of id: ${id} does not exist`\n  });\n});","map":{"version":3,"sources":["C:/Users/eteka/AllofAfrica/pages/api/card/[id].js"],"names":["countries","req","res","datafilter","reponse","forEach","donnee","push","hotels","index","length","filter","hotel","id","query","lenght","status","json","name","message"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,8BAAxB;AAEA,gBAAe,CAACC,GAAD,EAAKC,GAAL,KAAa;AAG3B,QAAMC,UAAU,GAAG,EAAnB;AACE,QAAMC,OAAO,GAAG,EAAhB;AAEAJ,EAAAA,SAAS,CAACK,OAAV,CAAkBC,MAAM,IAAIH,UAAU,CAACI,IAAX,CAAgBD,MAAM,CAACE,MAAvB,CAA5B;;AAEF,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,UAAU,CAACO,MAAX,GAAkB,CAA9C,EAAiDD,KAAK,EAAtD,EAA0D;AAEvDL,IAAAA,OAAO,GAAGJ,SAAS,CAACS,KAAD,CAAT,CAAiBD,MAAjB,CAAwBG,MAAxB,CAA+BC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaZ,GAAG,CAACa,KAAJ,CAAUD,EAA/D,CAAV;AAEF;;AAGET,EAAAA,OAAO,CAACW,MAAR,GAAkBb,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACJ,IAAAA,EAAE,EAACZ,GAAG,CAACa,KAAJ,CAAUD,EAAd;AAAiBK,IAAAA,IAAI,EAAC;AAAtB,GAArB,CAAlB,GAAwEhB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACE,IAAAA,OAAO,EAAG,uBAAsBN,EAAG;AAApC,GAArB,CAAxE;AAKH,CApBD","sourcesContent":["import {countries} from '../../../datas/countriesData'\r\n\r\nexport default (req,res) => {\r\n   \r\n   \r\n const datafilter = [] \r\n   const reponse = \"\"\r\n   \r\n   countries.forEach(donnee => datafilter.push(donnee.hotels))\r\n\r\n for (let index = 0; index < datafilter.length-1; index++) {\r\n     \r\n    reponse = countries[index].hotels.filter(hotel => hotel.id === req.query.id)\r\n     \r\n }\r\n\r\n    \r\n    reponse.lenght ?  res.status(200).json({id:req.query.id,name:'haha'}) : res.status(404).json({message: `this details of id: ${id} does not exist`})\r\n    \r\n   \r\n   \r\n        \r\n}"]},"metadata":{},"sourceType":"module"}